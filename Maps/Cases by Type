PROBLEM:
#87 - Cases by type

The method casesByType takes as input a list of cases and returns a Map> with case types 
(Type field on Case) as the keys, and a list of cases of that type as values. This map 
should not include cases with no Type specified.

For example, given the following cases:
c1
Subject: 'Power does not come on'
Type: 'Electrical'

c2
Subject: 'Several switches not responding'
Type: 'Electrical'

c3
Subject: 'Lever jammed - cannot run machine'
Type: 'Structural'

The method call casesByType(new List {c1, c2, c3}) should return a map containing the 
following key/value pairs:
'Electrical' -> { c1, c2 }
'Structural' -> { c3 }

Hint 1:
We have a Map different from what we've used before - the values in this Map are of type 
List. This means that the put method expects a list of cases as the second argument, and 
the get method returns a list of cases

Hint 2:
Loop over cases to build your map. If a key already exists, first use the get method to obtain 
the list and and then add the element to the list. Otherwise, create a new list to add to the map.

Hint 3:
Assuming the map is named myMap and the case variable is named myCase, use the following 
lines to add an element when a key does not currently exist: myMap.put(myCase.Type, new List { myCase }).

Hint 4:
Assuming the map is named myMap and the case variable is named myCase, use the following 
lines to add an element when a key already exists: myMap.get(myCase.Type).add(myCase).

-------------------------------
SOLUTION:

public Map<String, List<Case>> casesByType(List<Case> cases) {
    // Declare the new map to hold case type as key and list of cases as value
    Map<String, List<Case>> newCases = new Map<String, List<Case>>();
    // Loop through the list of cases
    for (Case myCase : cases) {
        // Check if case has a Type specified
        if (myCase.Type != null && myCase.Type != '') {
            // If Type already exists, add the case to the corresponding list
            if (newCases.containsKey(myCase.Type)) {
                newCases.get(myCase.Type).add(myCase);
            } else {
                // If the Type doesn't exist, create a new list and add the case to it
                newCases.put(myCase.Type, new List<Case>{myCase});
            }
        }
    }
    return newCases;
}