PROBLEM:
#7 - Prime Number

A prime number is a number greater than 1 that is not evenly divisible by any number greater than one and smaller than itself. For example, 13 is a prime number because it is not evenly divisible by any number between 1 and 13.

Implement the function isPrime that takes as input an integer greater than 1, returns true if the integer is a prime number, and returns false otherwise. Assume that the input will always be greater than 1.

isPrime(10) = false. 10 is not a prime number because it is evenly divisible by 2 and 5.

isPrime(23) = true. 23 is a prime number because it is not evenly divisible by any number from 2 to 22.

Hint 1:
Use the Math.mod function to calculate the remainder after a division. A return value of 0 means the first argument was evenly divisible by the second.

Hint 2:
Loop through all Integers from 2 to num - 1, and test for divisibility for each.

-------------------------------
SOLUTION:

public Boolean isPrime(Integer num) {
    for (Integer i = 2; i < num - 1; i++) {
        if (Math.mod(num, i) == 0) {
            return false;  // If divisible by i, it's not prime
        }
    }
    return true;  // If no divisors were found, it's prime
}