PROBLEM:
#102 - Throw An Exception

Implement the method checkAccounts, which accepts a list of accounts as an input and returns 
a list of accounts. The method should behave as follows:

* If all accounts in the list have BillingCity present, the method should return the original list.

* If the passed list is null the method should throw the built-in IllegalArgumentException 
with message 'accounts should not be null'

* If any of the accounts in the list do not have a BillingCity present, the method should throw 
the custom AccountException exception with message 'Invalid BillingCity'. Do not create new 
exception class - use the AccountException class that has already been created for you.

Given the following test code:
List<Account> accounts = new List<Account>();
accounts.add(new Account(name ='Salesforce', BillingCity ='Boston'));
accounts.add(new Account(name ='Microsoft'));

The method callcheckAccounts(accounts); should fail, throwing an AccountException.

Hint 1:
Use the throw keyword to throw an exception.
https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_exception_definition.htm

Hint 2:
IllegalArgumentException is a built-in Apex exception that you can throw.
https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_classes_exception_methods.htm

Hint 3:
AccountException has been defined for you as a custom exception.
https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_exception_custom.htm
Note: The documentation page linked above incorrectly states that you cannot throw built-in Apex exceptions.

-------------------------------
SOLUTION:

public List<Account> checkAccounts(List<Account> accounts)
{
    // If the list is null throw the built-in Apex exception
    if (accounts == null) {
        throw new IllegalArgumentException('accounts should not be null');
    }
    // If any accounts do not have BillingCity throw the custom exception
    for (Account acc : accounts) {
        if (acc.BillingCity == null || acc.BillingCity == '') {
            throw new AccountException('Invalid BillingCity');
        }
    }
    // return the list if all accounts have a BillingCity
    return accounts;
}

//do not remove the following custom-defined exception
public class AccountException extends Exception {}