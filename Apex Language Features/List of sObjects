PROBLEM:
#101 - List of sObjects

Implement the method getListOfsObject(), which accepts two parameters, a list of accounts, and a list of contacts, 
as an input and returns a list of sObjects. If both lists are empty or null, return an empty list of sObject.

Given the following test code:

List<Account> accounts = new List<Account>();
accounts.add(new Account(name ='Salesforce'));
accounts.add(new Account(name ='Microsoft'));

List<Contact> contacts= new List<Contact>();
contacts.add(new Contact(lastName = 'Benioff'));
contacts.add(new Contact(lastName = 'Taylor'));

List result = getListOfsObject(accounts,contacts);

result should be (Account:{Name=Salesforce}, Account:{Name=Microsoft}, Contact:{LastName=Benioff}, Contact:{LastName=Taylor})

Note: Adding different types into a list of sObjects can be used to perform operations on multiple object types in a single DML operation.

Hint 1:
Look at the Salesforce documentation on the sObject type:
https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_SObject_types.htm

Hint 2:
Declare a list of sObjects and add all items into it just like you would add items into a regular list.

-------------------------------
SOLUTION:

public List<sObject> getListOfsObject(List<Account> accounts, List<Contact> contacts)
{
    // Create a new list
    List<sObject> result = new List<sObject>();
    // Add account records to the list
    if (accounts != null) {
        result.addAll(accounts);
    }
    // Add contact records to the list
    if (contacts != null) {
        result.addAll(contacts);
    }
    return result;
}